Mongoose - Mongodb ORM NoSQL

Es un ORM (Mapeo objeto-relacional) es un intermediario entre la DB y la app web. No hay que escribir consultas directas del DBMS (en este caso MongoDB) 
Es un ORM dedicado a Nodejs y a Mongodb y es un modulo NPM de conexion para conectarnos a MongoDB, podemos definir un esquema, una estructura para guardar datos.

----Requisitos para seguir el curso----

-MongoDB instalado
-Saber cosas de MongoDB (mongo shell, mongod, CRUD operaciones, saber manejar db y colecciones )

https://mongoosejs.com/docs/ la documentacion

------------------- INSTALACION ---------------------

Verificar tener instalado mongod y node | node -v y mongod --version +4
Para saber si MongoDB se esta ejecutando en mac o linux: sudo service mongod status | en windows lo activo con el comando mongod (para inicializar la instacia)

1- instalar Mongoose | npm i mongoose 
2- Crear un index.js y requerimos a mongoose | const mongoose = require('mongoose');
3- Para conectarnos a una instancia de mongoDB | recibe como parametro la direccion de la DB a la que me voy a conectar, Protocolo-direccionIP:puerto-baseDeDatos a conectar o si no existe se crea la DB(cuando guardamos un dato)
        - mongoose.connect('mongodb://127.0.0.1:27017/mywebstore')
4- Necesitamos añadirle las configuraciones de la conexion.
    -mongoose.connect("mongodb://127.0.0.1:27017/mywebstore", {
    useNewUrlParser: true,
    useUnifiedTopology: true
    });
4- Ejecutamos con node index.js 

---Eventos---
Los eventos de conexion nos ayudan a ejecutar codigo cuando algo succeda con la conexion | cuando hay un error o cuando se abre la conexion
.once("EVENT", CALLBACK | Solo escucha una vez ese evento
.on("EVENT", CALLBACK) | Siempre va a escuchar el evento 

// mongoose cuando la conexion haya sido abierta ejecuta el callback
mongoose.connection.once("open", _ => {
    console.log("Base de datos conectada a " + uri)
})

// cuando ocurra un evento de tipo error en la conexion ejecuta el callback
db.on("error", (err) => {
    console.log("error al conectarse a la instancia o se esta enviando un payload mayor a 16MB")
})

Tambien cuando definimos la instancia de conexion a mongoDB la conexion se resuelve como una promesa y si hay un error la podemos capturar con .catch()



-----------------MODELOS---------------------

Creamos un schema (describe la estructura de una base de datos) aqui vamos a definir las propiedades de los documentos dentro de nuestra base de datos. (definimos los atributos y el tipo de valor de cada atributo)

- Schema: definimos el Schema para mongoose (definimos la estructura - atributos y el tipo de valor de cada atributo)
- model: Nos permite interactuar con la BD (definimos el modelo productos con el schema)
- Un modelo es una coleccion (el nombre que le demos al modelo sera el de la coleccion y se guarda en plural)

// destructuramos del modulo de mongoose solo Schema y el model
- const { Schema, model } = require("mongoose");

// instaciamos la clase Schema para definir el Schema de la base de datos con los atributos y tipo de datos que va a almacenar. (podemos pasarle el tipo y el valor por default de un atributo)
- const productosSchema = new Schema({
    name: {
        type: String,
    },
    description: String,
    price: {
        type: Number,
        default: 0
    }
})

ESTE SERA EL NOMBRE DE LA COLECCION Y SE GUARDA EN PLURAL
// definimos el modelo productos con el schema y lo exportamos
module.exports = model("Product", productosSchema)

Unique lo que quiere decir que si otro documento se registra con el mismo nombre que otra da un error porque ese valor es unico | unique: true
    -Si ya tenemos una coleccion con atributos repetidos, unique no funciona, hay que eliminar la propiedad de todos los documentos para que funcione la propiedad unique.
El valor required: true define si estamos insertando un documento y no le estamos pasando ese atributo da un error porque ese atributo es requerido


----INDEX.JS----
Importamos la conexion a la DB y el modelo de datos product
- require("./connection");
- const Product = require("./modelos/Product")

// define un producto
const product = new Product({
  name: "PC",
  description: "Esta seria la descripcion de la PC",
  price: 1300.99,
});

Y lo podemos ver definido con un console.log(product);


------------ CRUD - Para guardar datos----------

----CREATE => .SAVE()----
// Para guardar un documento basado en el modelo Product y es un metodo asincrono y cuando termine lo manejamos con un callback (recibe un error o el documento si se guardo) | Esto guarda este documento en la coleccion de products
product.save((err, document) => {
  // si existe un error muestralo pero si se guardo quiero ver el documento
  if (err) console.log(err);
  console.log(document);
});

--async-await | .save()--

Para realizar operaciones CRUD con async-await
1- importamos el modelo y la conexion
2- Creamos una funcion async-await
3- Crear un producto del modelo y lo guardamos en una constante
4- const productSaved = await prod.save(); | Operacion de guardar un documento en la DB es asincrono retorna una promesa con un error y si salio bien retorna el documento guardado

// importamos el modelo de datos
const Product = require("../modelos/Product");

const crearProducto = async () => {
  const pcOne = new Product({
    name: "Desktop HP",
    description: "htp lol description",
  });

  // guarda el usuario en la coleccion producto
  await pcOne.save();

  console.log("Productos agregados en la coleccion-modelo product ")
};
crearProducto();



----READ => .FIND()----

- Para leer los datos de una coleccion se hace con el metodo MODELO.find() y este retorna un arreglo con los documentos de la coleccion o modelo
- Tambien este metodo retorna todos los documentos que cumplan con la condicion
    const main = async () => {
        
    // operacion asincrona que retorna un arreglo con todos los datos de esa coleccion o modelo
    const productos = await Product.find({ name: "keyboard" });
    console.log(productos);
    };

main();

- Para buscar un solo Documento En especifico MODELO.findOne({ username: "joe" }) y este retorna solo un documento que cumpla con la condicion
    const obtenerUsuario = async () => {
        // busca de la coleccion de Users que cumpla con la condicion retorna una promesa
        const consultaDelUsuario = await User.findOne({ username: "joe" })
        console.log(consultaDelUsuario)
    };
    obtenerUsuario();


----UPDATE => .UPDATE() | .FINDONEANDUPDATE()----

Para actualizar un documento de una coleccion usamos el metodo .update({CONDICION}, {ATRIBUTOS A REEMPLAZAR}) recibe dos parametros 
- 1ro el documento que vamos a actualizar | 2do atributos a reemplazar

const actualizarUsuario = async () => {
  // Para actualizar un documento de una coleccion usamos el metodo .update({CONDICION}, {ATRIBUTOS A REEMPLAZAR})
  // Actualiza el atributo password a los usuarios que cumplan con la condicion. SOLO ACTUALIZA LOS ATRIBUTOS ESPECIFICADOS
  const usuarioActualizado = await User.update(
    { username: "ejemplouser1" },
    { password: "contraseñaactualizadaMongoose" }
  );

  // muestra en consola el resultado de la operacion
  console.log(usuarioActualizado);
};
actualizarUsuario();


------------


OTRA MANERA DE ACTUALIZAR ATRIBUTOS DE UN DOCUMENTO ES:
- BUSCA EL USUARIO Y LUEGO ALTERO SUS PROPIEDADES Y DESPUES LO GUARDO

const algunaFuncion = async () => {
  // busca de la coleccion de Users que cumpla con la condicion y retorna usuario y lo guardamos en variable | y podemos alterar las propiedades del usuario
  const user = await User.findOne({ username: "ejemplouser2" });
  console.log(user);

  // altero el usuario y despues lo guardo
  user.password = "minuevapassword";
  user.save();
  console.log("usuario actualizado")
};
algunaFuncion();


------------


// Asi podemos añadirle un atributo nuevo al modelo | en este caso name
const otraFuncion = async () => {
  // busca el documento que cumpla la condicion y actualiza la propiedad name que acabo de incluir al modelo
  const user = await User.findOneAndUpdate(
    { username: "ejemplouser2" },
    { name: "willy david" },
    // le ponemos new: true para que me retorne el dato actualizado
    { new: true }
  );

  //   muestra el usuario modificado
  console.log(user);
};
otraFuncion();


----DELETE => .DELETEMANY() | .DELETEONE() | .findOneAndDelete() | .findByIdAndDelete()----

- Para eliminar varios documentos de un modelo usamos el metodo .deleteMany({ CONDICION })
const algunaFuncion = async () => {
  // elimina los documentos del modelo que cumplan la condicion (elimina todos los documento que cumplan la condicion)
  const result = await Product.deleteMany({ name: "keyboard" });
  console.log(result);
};
algunaFuncion()

const eliminaSoloUnDocumento = async () => {
  // elimina el documento del modelo que cumpla la condicion (elimina solo un documento que cumpla la condicion y si hay varios elimina solo el primero)
  const result = await Product.deleteOne({ name: "Desktop HP" });
  console.log(result);
};
// eliminaSoloUnDocumento();

const buscaUnDocumentoYloElimina = async () => {
  // busca y elimina el documento que encontro (elimina solo el documento que encontro y retorna el documento que elimino)
  const result = await Product.findOneAndDelete({ name: "Desktop LENOVO" });
  console.log(result);
};
// buscaUnDocumentoYloElimina();

const buscaUnDocumentoPorIDYloElimina = async () => {
  // busca un id y elimina el documento con el ID que encontro (elimina solo el documento que encontro por el ID y retorna el documento que elimino)
  const result = await Product.findByIdAndDelete("5e8d15910eafb91c302ee4bc");
  console.log(result);
};
buscaUnDocumentoPorIDYloElimina();


